# Build stage
FROM mcr.microsoft.com/dotnet/sdk:8.0 AS build
WORKDIR /src

# Copy solution file and all project files
COPY *.sln .
COPY CrawlSharp.Server/*.csproj ./CrawlSharp.Server/
COPY CrawlSharp/*.csproj ./CrawlSharp/

# Copy assets directory to root
COPY assets/ /assets/

# Restore dependencies
RUN dotnet restore CrawlSharp.Server/CrawlSharp.Server.csproj

# Copy all source files
COPY . .

# Remove obj directories to clear Windows-specific package assets
RUN find . -type d -name obj -exec rm -rf {} + || true

# Build and publish
RUN dotnet publish CrawlSharp.Server/CrawlSharp.Server.csproj \
    -c Release \
    -o /app/publish \
    -p:GeneratePackageOnBuild=false

# Runtime stage
FROM mcr.microsoft.com/dotnet/aspnet:8.0 AS runtime

# Install dependencies for Playwright
RUN apt-get update && apt-get install -y \
    libnss3 \
    libnspr4 \
    libatk1.0-0 \
    libatk-bridge2.0-0 \
    libcups2 \
    libdrm2 \
    libdbus-1-3 \
    libatspi2.0-0 \
    libx11-6 \
    libxcomposite1 \
    libxdamage1 \
    libxext6 \
    libxfixes3 \
    libxrandr2 \
    libgbm1 \
    libxcb1 \
    libxkbcommon0 \
    libpango-1.0-0 \
    libcairo2 \
    libasound2 \
    fonts-liberation \
    libgtk-3-0 \
    libxshmfence1 \
    xdg-utils \
    && rm -rf /var/lib/apt/lists/*

WORKDIR /app

# Copy published files from build stage
COPY --from=build /app/publish .

# Create a non-root user to run the application
RUN useradd -m -u 1001 appuser && chown -R appuser:appuser /app
USER appuser

# Set environment variables for Playwright
ENV PLAYWRIGHT_BROWSERS_PATH=/app/.playwright
ENV PLAYWRIGHT_SKIP_BROWSER_DOWNLOAD=0

# Expose port (adjust as needed)
EXPOSE 8080

# Set the entry point
ENTRYPOINT ["dotnet", "CrawlSharp.Server.dll", "*", "8000"]